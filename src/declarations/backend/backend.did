type Utxo = 
 record {
   height: nat32;
   outpoint: OutPoint;
   value: Satoshi;
 };
type TransferFromError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientAllowance: record {allowance: nat;};
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type StudentOutput = 
 record {
   amountDonated: Satoshi;
   bio: text;
   donations: vec text;
   gpa: text;
   id: nat;
   image: text;
   level: text;
   name: text;
   schoolId: nat;
 };
type SendRequest = 
 record {
   amount_in_satoshi: Satoshi;
   destination_address: text;
 };
type SendCkBTCRequest = 
 record {
   amount_in_e8s: nat;
   destination_address: principal;
 };
type SchoolOutput = 
 record {
   amountDonated: Satoshi;
   description: text;
   donations: vec text;
   id: nat;
   images: vec text;
   location: text;
   name: text;
   students: vec nat;
 };
type Satoshi__1 = nat64;
type Satoshi = nat64;
type Result_5 = 
 variant {
   err: text;
   ok: text;
 };
type Result_4 = 
 variant {
   err: text;
   ok: Donation;
 };
type Result_3 = 
 variant {
   err: text;
   ok: SchoolOutput;
 };
type Result_2 = 
 variant {
   err: text;
   ok: StudentOutput;
 };
type Result_1 = 
 variant {
   err: TransferFromError;
   ok: text;
 };
type Result = 
 variant {
   err: TransferError;
   ok: BlockIndex;
 };
type Page = vec nat8;
type OutPoint = 
 record {
   txid: blob;
   vout: nat32;
 };
type Network = 
 variant {
   mainnet;
   regtest;
   testnet;
 };
type MillisatoshiPerVByte = nat64;
type InitStudentParams = 
 record {
   bio: text;
   gpa: text;
   id: nat;
   image: text;
   level: text;
   name: text;
   schoolId: nat;
 };
type InitSchoolParams = 
 record {
   description: text;
   id: nat;
   images: vec text;
   location: text;
   name: text;
   students: vec nat;
 };
type InitParams = 
 record {
   network: Network;
   schools: vec InitSchoolParams;
   students: vec InitStudentParams;
 };
type GetUtxosResponse = 
 record {
   next_page: opt Page;
   tip_block_hash: BlockHash;
   tip_height: nat32;
   utxos: vec Utxo;
 };
type DonationParamsNNS = 
 record {
   amount: nat;
   donationCategory: Category;
   donationTo: nat;
   paymentMethod: nat;
   recipientId: nat;
 };
type DonationParams = 
 record {
   amount: Satoshi;
   donater: BitcoinAddress;
   donationCategory: Category;
   donationTo: nat;
   paymentMethod: nat;
   recipientId: nat;
   txId: text;
 };
type Donation = 
 record {
   amount: Satoshi;
   category: Category;
   confirmed: bool;
   donater: BitcoinAddress;
   donationTo: nat;
   dti: text;
   paymentMethod: nat;
   recipientId: nat;
   txId: text;
 };
type Category = 
 record {
   categoryType: nat;
   cdd: nat;
   ls: nat;
   ss: nat;
   ts: nat;
 };
type BlockIndex = nat;
type BlockHash = vec nat8;
type BitcoinDonations = 
 service {
   create_donation_record: (DonationParams) -> (Result_5);
   /// Returns the balance of the given Bitcoin address.
   get_btc_balance: (BitcoinAddress__1) -> (Satoshi__1);
   get_canister_id: () -> (principal);
   /// Returns the ckbtc of the given canister address.
   get_ckBtc_balance: () -> (nat);
   /// Returns the 100 fee percentiles measured in millisatoshi/vbyte.
   /// Percentiles are computed from the last 10,000 transactions (if available).
   get_current_fee_percentiles: () -> (vec MillisatoshiPerVByte);
   /// Return donation by dti
   get_donation: (text) -> (Result_4) query;
   get_logs: () -> (vec text) query;
   /// Returns the P2PKH address of this canister at a specific derivation path.
   get_p2pkh_address: () -> (BitcoinAddress__1);
   /// Return the school with the given ID, if one exists
   get_school: (nat) -> (Result_3) query;
   /// Return the student with the given ID, if one exists
   get_student: (nat) -> (Result_2) query;
   get_total_donations: () -> (nat) query;
   get_total_schools: () -> (nat) query;
   get_total_students: () -> (nat) query;
   /// Returns the UTXOs of the given Bitcoin address.
   get_utxos: (BitcoinAddress__1) -> (GetUtxosResponse);
   /// Return the list of all donations
   list_donations: () -> (vec Donation) query;
   /// Return the list of all pending donations
   list_pending_donations: () -> (vec Donation);
   pay_with_nns: (DonationParamsNNS) -> (Result_1);
   /// Sends the given amount of bitcoin from this canister to the given address.
   /// Returns the transaction ID.
   withdraw_btc: (SendRequest) -> (text);
   /// Sends the given amount of ckbtc from this canister to the given address.
   /// Returns the transaction ID.
   withdraw_ckbtc: (SendCkBTCRequest) -> (Result);
 };
type BitcoinAddress__1 = text;
type BitcoinAddress = text;
service : (InitParams) -> BitcoinDonations
